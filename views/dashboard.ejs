<!DOCTYPE html>
<html lang="pt-pt">
<head>
  <meta charset="UTF-8" />
  <title>Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

  <style>
    body {
      background-color: #1e293b;
      color: white;
      padding: 20px;
    }
    .chat-box {
      max-width: 700px;
      margin: 0 auto;
      background-color: #334155;
      border-radius: 8px;
      padding: 20px;
      height: 80vh;
      display: flex;
      flex-direction: column;
    }
    .messages {
      flex-grow: 1;
      overflow-y: auto;
      margin-bottom: 20px;
      display: flex;
      flex-direction: column;
      scrollbar-width: thin;
      scrollbar-color: #475569 transparent;
    }
    .messages::-webkit-scrollbar {
      width: 8px;
    }
    .messages::-webkit-scrollbar-thumb {
      background-color: #475569;
      border-radius: 4px;
    }
    .message {
      margin-bottom: 10px;
      padding: 10px 15px;
      border-radius: 12px;
      max-width: 75%;
      word-wrap: break-word;
      white-space: pre-wrap;
    }
    .from-me {
      background-color: #3b82f6;
      align-self: flex-end;
      color: white;
      text-align: right;
    }
    .from-other {
      background-color: #64748b;
      align-self: flex-start;
      color: white;
    }
    .timestamp {
      font-size: 0.75rem;
      margin-top: 4px;
      color: #cbd5e1;
    }
    .read-status {
      font-size: 0.7rem;
      color: #a5b4fc;
      margin-top: 2px;
    }
    form.d-flex > input.form-control,
    form.d-flex > input[type="file"] {
      background-color: #1e293b;
      color: white;
      border: 1px solid #475569;
    }
    #imagePreview {
      max-width: 150px;
      max-height: 150px;
      margin-left: 10px;
      border-radius: 8px;
      object-fit: cover;
    }
    #searchResults {
      background-color: #334155;
      max-width: 400px;
      margin-top: 5px;
      padding: 0;
      border: 1px solid #475569;
      border-radius: 4px;
      list-style-type: none;
      color: white;
      position: absolute;
      z-index: 1000;
      max-height: 200px;
      overflow-y: auto;
      display: none;
    }
    #searchResults li {
      padding: 6px 10px;
      cursor: pointer;
      border-bottom: 1px solid #475569;
    }
    #searchResults li:last-child {
      border-bottom: none;
    }
    #searchResults li:hover,
    #searchResults li[aria-selected="true"] {
      background-color: #3b82f6;
    }
    .search-container {
      position: relative;
      max-width: 400px;
    }
    .badge-unread {
      background-color: #ef4444;
      color: white;
      padding: 0.25em 0.6em;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class="container py-5">
    <header class="text-center mb-4">
      <h1>Bem-vindo, <%= username %>!</h1>
      <a href="/logout" class="btn btn-danger mt-2">Sair</a>
    </header>

    <section class="card p-4 mb-4" aria-labelledby="form-title">
      <h3 id="form-title">Enviar mensagem</h3>

      <form id="searchForm" class="mb-3" onsubmit="return false;">
        <div class="input-group search-container">
          <input type="search" id="searchInput" class="form-control" placeholder="Pesquisar utilizador..." autocomplete="off" />
          <button type="submit" class="btn btn-primary">Pesquisar</button>
          <ul id="searchResults"></ul>
        </div>
      </form>

      <form id="sendMessageForm" autocomplete="off">
        <div class="mb-3">
          <label for="toUser" class="form-label">Para:</label>
          <select id="toUser" name="toUser" class="form-select" required>
            <option value="" disabled selected>Escolha um usuário</option>
            <% users.forEach(user => { %>
              <option value="<%= user._id %>" <%= user._id.toString() === userId ? 'disabled' : '' %>><%= user.username %></option>
            <% }) %>
          </select>
        </div>
        <div class="mb-3">
          <label for="message" class="form-label">Mensagem:</label>
          <textarea id="message" name="message" class="form-control" rows="3" placeholder="Digite sua mensagem..." required></textarea>
        </div>
        <button class="btn btn-primary" type="submit">Enviar</button>
      </form>
      <div id="sendStatus" class="mt-2"></div>
    </section>

    <section class="card p-4" aria-labelledby="threads-title">
      <h3 id="threads-title">Mensagens recebidas</h3>
      <div id="threads-container" class="list-group"></div>
    </section>
  </div>

<script>
  async function atualizarThreads() {
    try {
      const response = await fetch('/dashboard/api/threads');
      if (!response.ok) throw new Error('Erro ao buscar threads');
      const threads = await response.json();

      const container = document.getElementById('threads-container');
      container.innerHTML = '';

      if (!threads.length) {
        const msg = document.createElement('p');
        msg.className = 'text-muted';
        msg.textContent = 'Nenhuma mensagem recebida.';
        container.appendChild(msg);
        return;
      }

      threads.forEach(thread => {
        const link = document.createElement('a');
        link.href = `/dashboard/chat/${thread.fromUser._id}`;
        link.className = 'list-group-item list-group-item-action bg-dark text-light mb-2 rounded d-flex justify-content-between align-items-start';

        const infoDiv = document.createElement('div');
        const strong = document.createElement('strong');
        strong.textContent = `${thread.fromUser.username}: `;

        const msgText = document.createTextNode(thread.latestMessage.text || '[Imagem]');
        const date = document.createElement('small');
        date.textContent = new Date(thread.latestMessage.createdAt).toLocaleString();

        infoDiv.appendChild(strong);
        infoDiv.appendChild(msgText);
        infoDiv.appendChild(document.createElement('br'));
        infoDiv.appendChild(date);
        link.appendChild(infoDiv);

        if (thread.unreadCount > 0) {
          const badge = document.createElement('span');
          badge.className = 'badge-unread';
          badge.setAttribute('aria-label', `${thread.unreadCount} mensagens não lidas`);
          badge.textContent = thread.unreadCount;
          link.appendChild(badge);
        }

        container.appendChild(link);
      });
    } catch (error) {
      console.error('Erro ao atualizar threads:', error);
      const errMsg = document.createElement('p');
      errMsg.className = 'text-danger';
      errMsg.textContent = 'Erro ao carregar mensagens.';
      document.getElementById('threads-container').appendChild(errMsg);
    }
  }

  async function handleEnviarMensagem(e) {
    e.preventDefault();

    const form = document.getElementById('sendMessageForm');
    const toUser = form.toUser.value;
    const message = form.message.value.trim();
    const statusDiv = document.getElementById('sendStatus');

    if (!toUser || !message) {
      statusDiv.textContent = 'Por favor, preencha todos os campos.';
      statusDiv.style.color = 'red';
      return;
    }

    try {
      const response = await fetch('/dashboard/send', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ toUser, message })
      });

      if (!response.ok) throw new Error('Erro ao enviar mensagem');

      statusDiv.textContent = 'Mensagem enviada com sucesso!';
      statusDiv.style.color = 'lightgreen';
      form.reset();
      await atualizarThreads();
    } catch (error) {
      console.error(error);
      statusDiv.textContent = 'Erro ao enviar mensagem.';
      statusDiv.style.color = 'red';
    }
  }

  document.getElementById('sendMessageForm').addEventListener('submit', handleEnviarMensagem);

  const searchInput = document.getElementById('searchInput');
  const searchResults = document.getElementById('searchResults');

  async function pesquisarUsuarios(query) {
    if (!query) {
      searchResults.style.display = 'none';
      searchResults.innerHTML = '';
      return;
    }
    try {
      const response = await fetch(`/dashboard/api/users?q=${encodeURIComponent(query)}`);
      const results = await response.json();
      if (!results.length) {
        searchResults.innerHTML = '<li>Nenhum usuário encontrado</li>';
      } else {
        searchResults.innerHTML = results.map(user => `<li role="option" tabindex="0" data-id="${user._id}">${user.username}</li>`).join('');
      }
      searchResults.style.display = 'block';
    } catch (error) {
      console.error('Erro na pesquisa:', error);
    }
  }

  searchInput.addEventListener('input', (e) => {
    pesquisarUsuarios(e.target.value.trim());
  });

  searchResults.addEventListener('click', (e) => {
    if (e.target.tagName.toLowerCase() === 'li') {
      selecionarUsuario(e.target);
    }
  });

  function selecionarUsuario(item) {
    const userId = item.getAttribute('data-id');
    const select = document.getElementById('toUser');
    const option = Array.from(select.options).find(opt => opt.value === userId);
    if (option && !option.disabled) {
      select.value = userId;
    }
    searchInput.value = '';
    searchResults.style.display = 'none';
    searchResults.innerHTML = '';
    searchInput.focus();
  }

  atualizarThreads();
  setInterval(atualizarThreads, 30000);
</script>

</body>
</html>